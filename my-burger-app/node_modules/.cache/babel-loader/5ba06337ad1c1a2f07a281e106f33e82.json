{"ast":null,"code":"var _jsxFileName = \"/home/aradhya/React-App/my-burger-app/src/containers/BurgerBuilder/BurgerBuilder.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actionTypes from '../../store/actions';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Aux from '../../hoc/Aux/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nimport axios from '../../axios-orders';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      purchasing: false,\n      loading: false,\n      error: false\n    };\n\n    this.purchaseHandler = () => {\n      this.setState({\n        purchasing: true\n      });\n    };\n\n    this.purchaseCancelHandler = () => {\n      this.setState({\n        purchasing: false\n      });\n    };\n\n    this.purchaseContinueHandler = () => {\n      // const queryParam = [];\n      // for(let i in this.state.ingredients){\n      //     queryParam.push(encodeURIComponent(i)+ '=' + encodeURIComponent(this.state.ingredients[i]));\n      // }\n      // queryParam.push('price='+this.state.totalPrice);\n      // const queryString = queryParam.join('&');\n      this.props.history.push('/checkout');\n    };\n  }\n\n  componentDidMount() {// console.log(this.props);\n    // axios.get('https://react-my-burger-bootcamp.firebaseio.com/ingredients.json')\n    //   .then(response => {\n    //         this.setState({ingredients:response.data})\n    //   })\n    //   .catch(error => {\n    //       this.setState({error:true});\n    //   });\n  }\n\n  updatePurchaseState(ingredients) {\n    const sum = Object.keys(ingredients).map(igKey => {\n      return ingredients[igKey];\n    }).reduce((sum, el) => {\n      return sum + el;\n    }, 0);\n    return sum > 0;\n  }\n\n  render() {\n    const disabledInfo = { ...this.props.ings\n    };\n\n    for (let key in disabledInfo) {\n      disabledInfo[key] = disabledInfo[key] <= 0;\n    }\n\n    let orderSummary = null;\n    let burger = this.state.error ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 40\n      }\n    }, \"Ingredient can't be loaded>\") : /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        alignItems: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 112\n      }\n    }));\n\n    if (this.props.ings) {\n      burger = /*#__PURE__*/React.createElement(Aux, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Burger, {\n        ingredients: this.props.ings,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(BuildControls, {\n        ingredientAdded: this.props.onIngredientAdded,\n        ingredientRemoved: this.props.onIngredientRemoved,\n        disabled: disabledInfo,\n        purchasable: this.updatePurchaseState(this.props.ings),\n        ordered: this.purchaseHandler,\n        price: this.props.price,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }\n      }));\n      orderSummary = /*#__PURE__*/React.createElement(OrderSummary, {\n        ingredients: this.props.ings,\n        price: this.props.price,\n        purchaseCancelled: this.purchaseCancelHandler,\n        purchaseContinued: this.purchaseContinueHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 22\n        }\n      });\n    }\n\n    if (this.state.loading) {\n      orderSummary = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 26\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(Aux, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      show: this.state.purchasing,\n      modalClosed: this.purchaseCancelHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }\n    }, orderSummary), burger);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.ingredients,\n    price: state.totalPrice\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onIngredientAdded: ingName => dispatch({\n      type: actionTypes.ADD_INGREDIENT,\n      ingredientName: ingName\n    }),\n    onIngredientRemoved: ingName => dispatch({\n      type: actionTypes.REMOVE_INGREDIENT,\n      ingredientName: ingName\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(BurgerBuilder, axios));","map":{"version":3,"sources":["/home/aradhya/React-App/my-burger-app/src/containers/BurgerBuilder/BurgerBuilder.js"],"names":["React","Component","connect","actionTypes","BuildControls","Aux","Burger","Modal","OrderSummary","axios","Spinner","withErrorHandler","BurgerBuilder","state","purchasing","loading","error","purchaseHandler","setState","purchaseCancelHandler","purchaseContinueHandler","props","history","push","componentDidMount","updatePurchaseState","ingredients","sum","Object","keys","map","igKey","reduce","el","render","disabledInfo","ings","key","orderSummary","burger","alignItems","onIngredientAdded","onIngredientRemoved","price","mapStateToProps","totalPrice","mapDispatchToProps","dispatch","ingName","type","ADD_INGREDIENT","ingredientName","REMOVE_INGREDIENT"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actionTypes from '../../store/actions';\n\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Aux from '../../hoc/Aux/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport Modal from '../../components/UI/Modal/Modal'\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nimport axios from '../../axios-orders'\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\n\n\n\nclass BurgerBuilder extends Component{\n    state = {\n        purchasing:false,\n        loading:false,\n        error:false\n    }\n\n    componentDidMount(){\n        // console.log(this.props);\n        // axios.get('https://react-my-burger-bootcamp.firebaseio.com/ingredients.json')\n        //   .then(response => {\n        //         this.setState({ingredients:response.data})\n        //   })\n        //   .catch(error => {\n        //       this.setState({error:true});\n        //   });\n    }\n\n    updatePurchaseState (ingredients) {\n       \n        const sum = Object.keys(ingredients).map(igKey => {\n            return ingredients[igKey];\n        })\n        .reduce((sum,el) => {\n            return sum +el;\n        },0);\n        return sum > 0\n    }\n\n    purchaseHandler = () => {\n        this.setState({purchasing:true});\n    }\n\n    // addIngredientHandler = (type) => {\n    //     const oldCount= this.state.ingredients[type];\n    //     const updatedCount = oldCount+1;\n    //     const updatedIngredients = {\n    //         ...this.state.ingredients\n    //     };\n    //     updatedIngredients[type] = updatedCount;\n    //     const priceAddition = INGREDIENT_PRICES[type];\n    //     const oldPrice = this.state.totalPrice;\n    //     const newPrice = oldPrice + priceAddition;\n    //     this.setState({totalPrice: newPrice,ingredients: updatedIngredients});\n    //     this.updatePurchaseState(updatedIngredients);\n    // }\n\n    // removeIngredientHandler = (type) => {\n    //     const oldCount= this.state.ingredients[type];\n    //     if(oldCount <=0){\n    //         return;\n    //     }\n    //     const updatedCount = oldCount-1;\n    //     const updatedIngredients = {\n    //         ...this.state.ingredients\n    //     };\n    //     updatedIngredients[type] = updatedCount;\n    //     const priceDeduction = INGREDIENT_PRICES[type];\n    //     const oldPrice = this.state.totalPriceordered;\n    //     const newPrice = oldPrice - priceDeduction;\n    //     this.setState({totalPrice: newPrice,ingredients: updatedIngredients});\n    //     this.updatePurchaseState(updatedIngredients);\n    // }\n\n    purchaseCancelHandler = () => {\n        this.setState({purchasing: false});\n    }\n\n    purchaseContinueHandler = () =>{\n        \n        // const queryParam = [];\n        // for(let i in this.state.ingredients){\n        //     queryParam.push(encodeURIComponent(i)+ '=' + encodeURIComponent(this.state.ingredients[i]));\n        // }\n        // queryParam.push('price='+this.state.totalPrice);\n        // const queryString = queryParam.join('&');\n        this.props.history.push('/checkout');\n    }\n\n\n    render(){\n        const disabledInfo = {\n            ...this.props.ings\n        };\n        for(let key in disabledInfo){\n            disabledInfo[key] = disabledInfo[key] <=0;\n        }\n        \n        \n        \n\n        let orderSummary=null;\n        \n        let burger =this.state.error ? <p>Ingredient can't be loaded></p> : <div style={{alignItems:\"center\"}}><Spinner /></div>\n        if(this.props.ings){\n            burger =(\n                <Aux>\n                    <Burger ingredients={this.props.ings}/>\n                    <BuildControls \n                        ingredientAdded = {this.props.onIngredientAdded} \n                        ingredientRemoved = {this.props.onIngredientRemoved} \n                        disabled={disabledInfo} \n                        purchasable={this.updatePurchaseState(this.props.ings)}\n                        ordered={this.purchaseHandler}\n                        price={this.props.price} \n                    />\n                    </Aux>\n            );\n        \n        orderSummary=<OrderSummary \n            ingredients={this.props.ings}\n            price={this.props.price  }\n            purchaseCancelled={this.purchaseCancelHandler}\n            purchaseContinued={this.purchaseContinueHandler} />\n        }   \n        if(this.state.loading){\n            orderSummary=<Spinner />    \n        }\n        return (\n            <Aux>\n                <Modal show={this.state.purchasing} modalClosed={this.purchaseCancelHandler}>\n                    {orderSummary}\n                </Modal>\n                {burger}\n            </Aux>\n        );\n        \n    }\n}\n\nconst mapStateToProps = state => {\n    return{\n        ings: state.ingredients,\n        price: state.totalPrice\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return{\n        onIngredientAdded : (ingName) =>dispatch(\n            {type:actionTypes.ADD_INGREDIENT, ingredientName: ingName}),\n        onIngredientRemoved : (ingName) =>dispatch(\n            {type:actionTypes.REMOVE_INGREDIENT, ingredientName: ingName})\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(BurgerBuilder,axios));"]},"metadata":{},"sourceType":"module"}