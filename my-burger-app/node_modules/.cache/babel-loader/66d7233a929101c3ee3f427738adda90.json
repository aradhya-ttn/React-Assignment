{"ast":null,"code":"var _jsxFileName = \"/home/aradhya/React-project/bootcamp-react/my-burger-app/src/containers/Auth/Auth.js\";\nimport React, { Component } from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI//Spinner/Spinner';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { updateObject, checkValidity } from '../../shared/utility';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Mail Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSign: true\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = updateObject(this.state.controls, {\n        [controlName]: updateObject(this.state.controls[controlName], {\n          value: event.target.value,\n          valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        })\n      });\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSign: !prevState.isSign\n        };\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSign);\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let authRedirect = null;\n\n    if (this.props.isAuthenticated) {\n      authRedirect = /*#__PURE__*/React.createElement(Redirect, {\n        to: this.props.authRedirectPath,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 28\n        }\n      });\n    }\n\n    let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }));\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 18\n        }\n      });\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }\n      }, this.props.error.message);\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Auth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }, authRedirect, errorMessage, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }\n    }, form, /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }\n    }, \"SUBMIT\")), /*#__PURE__*/React.createElement(Button, {\n      clicked: this.switchAuthModeHandler,\n      btnType: \"Danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }, \"SWITCH TO \", this.state.isSign ? 'SIGNIN' : 'SIGNUP'));\n  }\n\n}\n\nconst mapToStateProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSign) => dispatch(actions.auth(email, password, isSign)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect(mapToStateProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/home/aradhya/React-project/bootcamp-react/my-burger-app/src/containers/Auth/Auth.js"],"names":["React","Component","Input","Button","Spinner","classes","actions","connect","Redirect","updateObject","checkValidity","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSign","inputChangedHandler","event","controlName","updatedControls","target","setState","switchAuthModeHandler","prevState","submitHandler","preventDefault","props","onAuth","componentDidMount","buildingBurger","authRedirectPath","onSetAuthRedirectPath","render","formElementsArray","key","push","id","config","authRedirect","isAuthenticated","form","map","formElement","loading","errorMessage","error","message","mapToStateProps","auth","token","burgerBuilder","building","mapDispatchToProps","dispatch","setAuthRedirectPath"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI//Spinner/Spinner';\nimport classes from './Auth.module.css';\nimport  * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nimport { Redirect} from 'react-router-dom';\nimport { updateObject,checkValidity } from '../../shared/utility';\n\nclass Auth extends Component{\n\n    state = {\n        controls : {\n            email: {\n                elementType:'input',\n                elementConfig:{\n                    type:'email',\n                    placeholder:'Mail Address'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    isEmail:true\n                },\n                valid:false,\n                touched:false\n            },\n            password: {\n                elementType:'input',\n                elementConfig:{\n                    type:'password',\n                    placeholder:'password'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    minLength:6\n                },\n                valid:false,\n                touched:false\n            }\n        },\n        isSign:true\n    }\n    componentDidMount(){\n        if(!this.props.buildingBurger && this.props.authRedirectPath!== '/'){\n            this.props.onSetAuthRedirectPath();\n\n        }\n    }\n\n       \n    inputChangedHandler =  (event, controlName)=>{\n        const updatedControls = updateObject(this.state.controls,{\n            [controlName]:updateObject(this.state.controls[controlName],{\n                value: event.target.value,\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n                \n            })\n        });\n        this.setState({controls:updatedControls});\n\n    }\n\n    switchAuthModeHandler=() =>{\n        this.setState(prevState =>{\n            return {isSign: !prevState.isSign};\n        });\n    }\n    submitHandler = (event)=>{\n        event.preventDefault();\n        this.props.onAuth(\n            this.state.controls.email.value,\n            this.state.controls.password.value,\n            this.state.isSign\n        );\n    }\n        \n    render(){\n        const formElementsArray = [];\n        for(let key in this.state.controls){\n            formElementsArray.push({\n                id:key,\n                config:this.state.controls[key]\n            });\n        }\n\n        let authRedirect = null;\n\n        if(this.props.isAuthenticated){\n            authRedirect = <Redirect to ={this.props.authRedirectPath} />\n        }\n        let form = formElementsArray.map(formElement => (\n            <Input \n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched = {formElement.config.touched}\n                changed={(event)=>this.inputChangedHandler(event,formElement.id)} />\n        ));\n\n        if(this.props.loading){\n            form=<Spinner />\n        }\n\n        let errorMessage = null;\n\n        if(this.props.error){\n            errorMessage=(\n                <p>{this.props.error.message}</p>\n            )\n        }\n        \n        return(\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                </form>\n        <Button\n            clicked ={this.switchAuthModeHandler} \n            btnType=\"Danger\">SWITCH TO {this.state.isSign ? 'SIGNIN' : 'SIGNUP'}</Button>\n            </div>\n        )\n    }\n}\n\nconst mapToStateProps = state =>{\n    return{\n        loading : state.auth.loading,\n        error:  state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    };\n};\n\nconst mapDispatchToProps = dispatch =>{\n    return {\n        onAuth: (email,password,isSign) => dispatch(actions.auth(email,password,isSign)),\n        onSetAuthRedirectPath: ()=>dispatch(actions.setAuthRedirectPath('/'))\n    };\n};\n\nexport default connect(mapToStateProps,mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}