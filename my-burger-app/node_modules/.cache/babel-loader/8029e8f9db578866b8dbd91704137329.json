{"ast":null,"code":"var _jsxFileName = \"/home/aradhya/React-App/my-burger-app/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        streets: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Zip Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6,\n            maxLength: 6\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Email'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        paymentMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'cod',\n              displayValue: 'CashOnDelivery'\n            }, {\n              value: 'card',\n              displayValue: 'DebitCard'\n            }, {\n              value: 'netbanking',\n              displayValue: 'NetBanking'\n            }]\n          },\n          value: '',\n          valid: true\n        }\n      },\n      formIsValid: false,\n      loading: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      this.setState({\n        loading: true\n      });\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n\n      const order = {\n        ingredients: this.props.ingredients,\n        price: this.props.price,\n        orderData: formData\n      };\n      axios.post('/orders.json', order).then(response => {\n        this.setState({\n          loading: false\n        });\n        this.props.history.push(\"/\");\n      }).catch(error => {\n        this.setState({\n          loading: false\n        });\n      });\n      console.log(this.props.ingredients);\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n      };\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (rules != null) {\n      if (rules.required && isValid) {\n        isValid = value.trim() !== '';\n      }\n\n      if (rules.minLength && isValid) {\n        isValid = value.length >= rules.minLength;\n      }\n\n      if (rules.maxLength && isValid) {\n        isValid = value.length <= rules.maxLength;\n      }\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }\n    }, formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      disabled: !this.state.formIsValid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }\n    }, \"ORDER\"));\n\n    if (this.state.loading) {\n      form = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 18\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.ContactData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }\n    }, \"Enter Your Contact Details\"), form);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.ingredients\n  };\n};\n\nexport default ContactData;","map":{"version":3,"sources":["/home/aradhya/React-App/my-burger-app/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","connect","Button","classes","axios","Spinner","Input","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","streets","zipCode","minLength","maxLength","country","email","paymentMethod","options","displayValue","formIsValid","loading","orderHandler","event","preventDefault","setState","formData","formElementIdentifier","order","ingredients","props","price","orderData","post","then","response","history","push","catch","error","console","log","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","rules","isValid","trim","length","render","formElementsArray","key","id","config","form","map","formElement","mapStateToProps","ings"],"mappings":"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","sourcesContent":["import React,{ Component } from \"react\";\nimport {connect} from 'react-redux';\n\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders'\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\n\nclass ContactData extends Component{\n    state={\n        orderForm:{\n            \n            name: {\n                elementType:'input',\n                elementConfig:{\n                    type:'text',\n                    placeholder:'Your Name'\n                },\n                value:'',\n                validation:{\n                    required:true\n                },\n                valid:false,\n                touched:false\n            },\n            streets:{\n                elementType:'input',\n                elementConfig:{\n                    type:'text',\n                    placeholder:'Street'\n                },\n                value:'',\n                validation:{\n                    required:true\n                },\n                valid:false,\n                touched:false\n            },\n            zipCode: {\n                elementType:'input',\n                elementConfig:{\n                    type:'text',\n                    placeholder:'Zip Code'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    minLength:6,\n                    maxLength:6\n                },\n                valid:false,\n                touched:false\n            },\n            country: {\n                elementType:'input',\n                elementConfig:{\n                    type:'text',\n                    placeholder:'Country'\n                },\n                value:'',\n                validation:{\n                    required:true\n                },\n                valid:false,\n                touched:false\n            },\n            email:{\n                elementType:'input',\n                elementConfig:{\n                    type:'email',\n                    placeholder:'Email'\n                },\n                value:'',\n                validation:{\n                    required:true\n                },\n                valid:false,\n                touched:false\n            },\n            paymentMethod: {\n                elementType:'select',\n                elementConfig:{\n                    options:[\n                        {value:'cod', displayValue:'CashOnDelivery'},\n                        {value:'card', displayValue:'DebitCard'},\n                        {value:'netbanking', displayValue:'NetBanking'}\n                    ]\n                },\n                value:'',\n                valid:true\n            }\n        },\n        formIsValid : false,\n        loading:false\n    }\n\n    orderHandler = (event) =>{\n        event.preventDefault();\n        this.setState({loading:true});\n        const formData = {};\n        for(let formElementIdentifier in this.state.orderForm){\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n        const order={\n            ingredients: this.props.ingredients,\n            price:this.props.price,\n            orderData : formData\n            }\n        axios.post('/orders.json',order)\n             .then(response => {\n                 this.setState({loading:false});\n                 this.props.history.push(\"/\");\n             })\n             .catch(error => {this.setState({loading:false});\n            });\n        console.log(this.props.ingredients);\n    }\n\n    checkValidity(value,rules){\n        let isValid = true;\n        if(rules!=null){\n            if(rules.required && isValid){\n                isValid = value.trim() !=='';\n            }\n            if(rules.minLength && isValid){\n                isValid = value.length >= rules.minLength ;\n            }\n            if(rules.maxLength && isValid){\n                isValid = value.length <= rules.maxLength ;\n            }\n        }\n        return isValid;\n    }\n\n    inputChangedHandler = (event,inputIdentifier) => {\n        const updatedOrderForm = {\n            ...this.state.orderForm\n        }\n        const updatedFormElement = {\n            ...updatedOrderForm[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value,updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n        \n        let   formIsValid = true;\n        for(let inputIdentifier in updatedOrderForm){\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        } \n        \n        this.setState({orderForm : updatedOrderForm, formIsValid: formIsValid});\n    }\n\n    render(){\n\n        const formElementsArray = [];\n        for(let key in this.state.orderForm){\n            formElementsArray.push({\n                id:key,\n                config:this.state.orderForm[key]\n            });\n        }\n\n        let form=(\n            <form onSubmit={this.orderHandler}>\n                    {formElementsArray.map(formElement => (\n                        <Input\n                            key={formElement.id}\n                            elementType={formElement.config.elementType}\n                            elementConfig={formElement.config.elementConfig}\n                            value={formElement.config.value}\n                            invalid={!formElement.config.valid}\n                            shouldValidate={formElement.config.validation}\n                            touched = {formElement.config.touched}\n                            changed={(event)=>this.inputChangedHandler(event,formElement.id)} />\n                    ))}\n                    <Button btnType=\"Success\" disabled={!this.state.formIsValid} >ORDER</Button>\n                </form>\n        );\n        if(this.state.loading){\n            form=<Spinner/>\n        }\n        return(\n            <div className={classes.ContactData}>\n                <h4>Enter Your Contact Details</h4>\n                {form}\n            </div>\n        );\n    }\n} \n\nconst mapStateToProps = state =>{\n    return{\n        ings: state.ingredients\n    }\n}\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}