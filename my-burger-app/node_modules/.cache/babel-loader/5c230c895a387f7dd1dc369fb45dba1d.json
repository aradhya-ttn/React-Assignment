{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (token, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken: token,\n    userId: userId\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationDate');\n  localStorage.removeItem('userId');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const auth = (email, password, isSignUp) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyC6SJQdHif4o6JeWREmpiw1sySxDWNkPyQ';\n\n    if (!isSignUp) {\n      url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyC6SJQdHif4o6JeWREmpiw1sySxDWNkPyQ';\n    }\n\n    axios.post(url, authData).then(response => {\n      console.log(response);\n      const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n      localStorage.setItem('token', response.data.idToken);\n      localStorage.setItem('expirationDate', expirationDate);\n      localStorage.setItem('userId', response.data.localId);\n      dispatch(authSuccess(response.data.idToken, response.data.localId));\n      dispatch(checkAuthTimeout(response.data.expiresIn));\n    }).catch(err => {\n      dispatch(authFail(err.response.data.error));\n    });\n  };\n};\nexport const setAuthRedirectPath = path => {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        const userId = localStorage.getItem('userId');\n        dispatch(authSuccess(token, userId));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/home/aradhya/React-project/bootcamp-react/my-burger-app/src/store/actions/Auth.js"],"names":["actionTypes","axios","authStart","type","AUTH_START","authSuccess","token","userId","AUTH_SUCCESS","idToken","authFail","error","AUTH_FAIL","logout","localStorage","removeItem","AUTH_LOGOUT","checkAuthTimeout","expirationTime","dispatch","setTimeout","auth","email","password","isSignUp","authData","returnSecureToken","url","post","then","response","console","log","expirationDate","Date","getTime","data","expiresIn","setItem","localId","catch","err","setAuthRedirectPath","path","SET_AUTH_REDIRECT_PATH","authCheckState","getItem"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport axios from 'axios';\n\nexport const authStart = () => {\n    return{\n        type: actionTypes.AUTH_START\n    };\n};\n\nexport const authSuccess = (token,userId) => {\n    return{\n        type: actionTypes.AUTH_SUCCESS,\n        idToken: token,\n        userId: userId\n    };\n};\n\nexport const authFail = (error) => {\n    return{\n        type: actionTypes.AUTH_FAIL,\n        error:error\n    };\n};\n\nexport const logout =() =>{\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationDate')\n    localStorage.removeItem('userId')\n    return{\n        type: actionTypes.AUTH_LOGOUT\n    };\n};\n\nexport const checkAuthTimeout = (expirationTime)=>{\n    return dispatch =>{\n        setTimeout(()=>{\n            dispatch(logout());\n        },expirationTime * 1000)\n    }\n}   \n\nexport const auth =(email,password,isSignUp)=>{\n    return dispatch =>  {\n        dispatch(authStart());\n        const authData= {\n            email: email,\n            password: password,\n            returnSecureToken: true\n        }\n        let url ='https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyC6SJQdHif4o6JeWREmpiw1sySxDWNkPyQ';\n        if(!isSignUp){\n            url ='https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyC6SJQdHif4o6JeWREmpiw1sySxDWNkPyQ';\n        }\n        axios.post(url,authData)\n            .then(response => {\n                console.log(response);\n                const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n                localStorage.setItem('token',response.data.idToken);\n                localStorage.setItem('expirationDate',expirationDate);\n                localStorage.setItem('userId',response.data.localId)\n                dispatch(authSuccess(response.data.idToken,response.data.localId));\n                dispatch(checkAuthTimeout(response.data.expiresIn));\n            })\n            .catch(err => {\n                dispatch(authFail(err.response.data.error));\n            })\n    }\n}\n\nexport const setAuthRedirectPath = (path) => {\n    return{\n        type:actionTypes.SET_AUTH_REDIRECT_PATH,\n        path:path\n    };\n};\n\nexport const authCheckState = () =>{\n    return dispatch =>{\n        const token= localStorage.getItem('token');\n        if(!token){\n            dispatch(logout());\n        }else {\n            const expirationDate=new Date(localStorage.getItem('expirationDate'));\n            if(expirationDate<= new Date()){\n                dispatch(logout());\n            }else{\n                const userId = localStorage.getItem('userId');\n                dispatch(authSuccess(token, userId));\n                dispatch(checkAuthTimeout((expirationDate.getTime()-new Date().getTime())/1000));\n            }\n            \n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}