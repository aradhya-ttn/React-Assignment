{"ast":null,"code":"var _jsxFileName = \"/home/aradhya/React-project/bootcamp-react/my-burger-app/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component } from \"react\";\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport { connect } from \"react-redux\";\nimport WithErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\nimport * as actions from '../../../store/actions/index';\nimport { updateObject, checkValidity } from '../../../shared/utility';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        streets: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Zip Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6,\n            maxLength: 6\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Email'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        paymentMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'cod',\n              displayValue: 'CashOnDelivery'\n            }, {\n              value: 'card',\n              displayValue: 'DebitCard'\n            }, {\n              value: 'netbanking',\n              displayValue: 'NetBanking'\n            }]\n          },\n          value: 'cod',\n          valid: true\n        }\n      },\n      formIsValid: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n\n      const order = {\n        ingredients: this.props.ings,\n        price: this.props.price,\n        orderData: formData,\n        userId: this.props.userId\n      };\n      this.props.onOrderBurger(order, this.props.token);\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n        value: event.target.value,\n        valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n        touched: true\n      });\n      const updatedOrderForm = updateObject(this.state.orderForm, {\n        [inputIdentifier]: updatedFormElement\n      });\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }, formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      disabled: !this.state.formIsValid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }\n    }, \"ORDER\"));\n\n    if (this.state.loading) {\n      form = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 18\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.ContactData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }\n    }, \"Enter Your Contact Details\"), form);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["/home/aradhya/React-project/bootcamp-react/my-burger-app/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","Button","classes","axios","Spinner","Input","connect","WithErrorHandler","withErrorHandler","actions","updateObject","checkValidity","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","streets","zipCode","minLength","maxLength","country","email","paymentMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ingredients","props","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","target","updatedOrderForm","setState","render","formElementsArray","key","push","id","config","form","map","formElement","loading","mapStateToProps","burgerBuilder","totalPrice","auth","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":"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","sourcesContent":["import React,{ Component } from \"react\";\n\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders'\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport { connect } from \"react-redux\";\nimport WithErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\nimport  * as actions from '../../../store/actions/index';\nimport {updateObject,checkValidity} from '../../../shared/utility';\n\nclass ContactData extends Component{\n    state={\n        orderForm:{\n            \n            name: {\n                elementType:'input',\n                elementConfig:{\n                    type:'text',\n                    placeholder:'Your Name'\n                },\n                value:'',\n                validation:{\n                    required:true\n                },\n                valid:false,\n                touched:false\n            },\n            streets:{\n                elementType:'input',\n                elementConfig:{\n                    type:'text',\n                    placeholder:'Street'\n                },\n                value:'',\n                validation:{\n                    required:true\n                },\n                valid:false,\n                touched:false\n            },\n            zipCode: {\n                elementType:'input',\n                elementConfig:{\n                    type:'text',\n                    placeholder:'Zip Code'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    minLength:6,\n                    maxLength:6\n                },\n                valid:false,\n                touched:false\n            },\n            country: {\n                elementType:'input',\n                elementConfig:{\n                    type:'text',\n                    placeholder:'Country'\n                },\n                value:'',\n                validation:{\n                    required:true\n                },\n                valid:false,\n                touched:false\n            },\n            email:{\n                elementType:'input',\n                elementConfig:{\n                    type:'email',\n                    placeholder:'Email'\n                },\n                value:'',\n                validation:{\n                    required:true\n                },\n                valid:false,\n                touched:false\n            },\n            paymentMethod: {\n                elementType:'select',\n                elementConfig:{\n                    options:[\n                        {value:'cod', displayValue:'CashOnDelivery'},\n                        {value:'card', displayValue:'DebitCard'},\n                        {value:'netbanking', displayValue:'NetBanking'}\n                    ]\n                },\n                value:'cod',\n                valid:true\n            }\n        },\n        formIsValid : false\n    }\n\n    orderHandler = (event) =>{\n        event.preventDefault();\n        const formData = {};\n        for(let formElementIdentifier in this.state.orderForm){\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n        const order={\n            ingredients: this.props.ings,\n            price:this.props.price,\n            orderData : formData,\n            userId:this.props.userId\n        }\n        this.props.onOrderBurger(order,this.props.token);\n\n        \n    }\n\n    inputChangedHandler = (event,inputIdentifier) => {\n       \n        const updatedFormElement =updateObject(this.state.orderForm[inputIdentifier],{\n            value: event.target.value,\n            valid: checkValidity(event.target.value,this.state.orderForm[inputIdentifier].validation),\n            touched: true\n            \n        }); \n        const updatedOrderForm = updateObject(this.state.orderForm,{\n            [inputIdentifier] : updatedFormElement\n        })\n      \n        \n        let   formIsValid = true;\n        for(let inputIdentifier in updatedOrderForm){\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        } \n        \n        this.setState({orderForm : updatedOrderForm, formIsValid: formIsValid});\n    }\n\n    render(){\n\n        const formElementsArray = [];\n        for(let key in this.state.orderForm){\n            formElementsArray.push({\n                id:key,\n                config:this.state.orderForm[key]\n            });\n        }\n\n        let form=(\n            <form onSubmit={this.orderHandler}>\n                    {formElementsArray.map(formElement => (\n                        <Input\n                            key={formElement.id}\n                            elementType={formElement.config.elementType}\n                            elementConfig={formElement.config.elementConfig}\n                            value={formElement.config.value}\n                            invalid={!formElement.config.valid}\n                            shouldValidate={formElement.config.validation}\n                            touched = {formElement.config.touched}\n                            changed={(event)=>this.inputChangedHandler(event,formElement.id)} />\n                    ))}\n                    <Button btnType=\"Success\" disabled={!this.state.formIsValid} >ORDER</Button>\n                </form>\n        );\n        if(this.state.loading){\n            form=<Spinner/>\n        }\n        return(\n            <div className={classes.ContactData}>\n                <h4>Enter Your Contact Details</h4>\n                {form}\n            </div>\n        );\n    }\n} \n\nconst mapStateToProps = state => {\n    return{\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order. loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n}\n\nconst mapDispatchToProps = dispatch =>{\n    return{\n         onOrderBurger: (orderData,token)=> dispatch(actions.purchaseBurger(orderData,token))\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(ContactData ,axios));"]},"metadata":{},"sourceType":"module"}